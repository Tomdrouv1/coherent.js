name: CI

on:
  push:
    branches: [ '**' ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ '**' ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Type check
        run: pnpm run typecheck

      - name: Unit tests with coverage
        run: pnpm run test:coverage

      - name: Generate coverage report
        run: pnpm run coverage:report

      - name: Upload coverage to Codecov
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
        continue-on-error: true

      - name: Upload coverage artifacts
        if: matrix.node-version == '22.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            coverage-summary.json

      - name: Build package
        run: pnpm run build

      - name: Build website (sanity check)
        run: pnpm run website:build

  deploy_website:
    name: Deploy Website (release branches/tags only)
    needs: test
    runs-on: ubuntu-latest
    if: >-
      github.event_name == 'push' && (
        startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/v')
      )
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: 'pages'
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build website
        run: pnpm run website:build

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-temp/
        continue-on-error: true

      - name: Copy coverage files to website
        run: |
          if [ -d "coverage-temp" ]; then
            mkdir -p website/dist/coverage
            cp -r coverage-temp/* website/dist/
            echo "✅ Coverage files copied to website"
          else
            echo "⚠️  No coverage files found, creating placeholder badge"
            mkdir -p website/dist/coverage
            echo '{"schemaVersion": 1, "label": "coverage", "message": "N/A", "color": "lightgrey"}' > website/dist/coverage/badge.json
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: website/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Print deployed URL
        run: |
          echo "Pages URL: ${{ steps.deployment.outputs.page_url }}"

  publish_npm:
    name: Publish to npm (tags only)
    needs: test
    runs-on: ubuntu-latest
    if: >-
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') &&
      github.repository == 'Tomdrouv1/coherent.js'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Publish all packages
        run: pnpm -r publish --provenance --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
